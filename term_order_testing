#!/usr/local/bin/ruby -I ./lib/

# == Synopsis 
#   This command computes possible term orders and 
#   the toric ideal of the matrix I
# == Examples
#   This command finds term orders and the toric ideal of I
#     term_order_testing normal_matrix.txt
#
USAGE = <<-EOS
== Usage 
  term_order_testing [options] source_matrix_file

  For help use: term_order_testing -h

== Options
  -h, --help          Displays help message
  -v, --version       Display the version, then exit
  -q, --quiet         Output as little as possible, overrides verbose
  -V, --verbose       Verbose output
  -X, --very-verbose Very verbose output

== Author
  Ashley Shimabuku, Jeff Remer

== Copyright
  Copyright (c) 2011 Ashley Shimabuku, Jeff Remer. Licensed under the MIT License:
  http://www.opensource.org/licenses/mit-license.php
EOS

require 'optparse'
require 'ostruct'
require 'date'
require 'array'
require 'yaml'require 'kernel_matrix'
require 'polytope'


class App
  VERSION = '0.0.1'
  
  attr_reader :options

  def initialize(arguments, stdin)
    @arguments = arguments
    @stdin = stdin
    
    @output_dir = generate_output_dir_name
    @error_file = "output/error_#{Time.now.to_i}.log"
    Dir.mkdir("output") unless Dir.exists?("output")
    
    # Set defaults
    @options = OpenStruct.new
    @options.verbose = false
    @options.very_verbose = false
    @options.quiet = false
  end

  # Parse options, check arguments, then process the command
  def run
        
    if parsed_options? && arguments_valid? 
      
      puts "Start at #{DateTime.now}\n\n" if @options.verbose
      
      output_options if @options.verbose
            
      process_arguments            
      process_command
      
      puts "\nFinished at #{DateTime.now}" if @options.verbose
      
    else
      output_usage
    end
      
  end
  
  protected
  
    def parsed_options?
      
      # Specify options
      opts = OptionParser.new 
      opts.on('-v', '--version')          { output_version ; exit 0 }
      opts.on('-h', '--help')             { output_help }
      opts.on('-V', '--verbose')          { @options.verbose = true } 
      opts.on('-X', '--very-verbose')     { @options.very_verbose = true }   
      opts.on('-q', '--quiet')            { @options.quiet = true }
            
      opts.parse!(@arguments) rescue return false
      
      process_options
      true      
    end

    # Performs post-parse processing on options
    def process_options
      @options.verbose = false if @options.quiet
      @options.very_verbose = false if @options.quiet
      @options.verbose = true if @options.very_verbose
    end
    
    def output_options
      puts "Options:\n"
      
      @options.marshal_dump.each do |name, val|        
        puts "  #{name} = #{val}"
      end
    end

    # True if required arguments were provided
    def arguments_valid?
      true if @arguments.length == 1 && File.exists?(@arguments.first)
    end
    
    # Setup the arguments
    def process_arguments
      @input_filename = @arguments.first
    end
    
    def output_help
      output_version
      puts USAGE
      exit
    end
    
    def output_usage
      puts USAGE
      exit
    end
    
    def output_version
      puts "#{File.basename(__FILE__)} version #{VERSION}"
    end
    
    
    
    
    #TODO
    # change to input hilbert basis not just one line of a file
    #
    def process_command
      $VERBOSE=nil
      line_count = `wc -l < #{@input_filename}`.chomp.strip.to_i
      processed_count = 0
      puts "\nProcessing #{@input_filename}: #{line_count} total lines\n\n" if @options.verbose
      IO.foreach(@input_filename){ |line|
        begin
          process_line(line)
        rescue
          log_error(line)
        end
        processed_count += 1
        percent_done = sprintf "%.2f", (processed_count / line_count.to_f) * 100
        puts "Processed #{processed_count} of #{line_count} (#{line.chomp}) (#{percent_done}%)" if @options.verbose
      }
    end
    #
    # array = IO.readlines(INPUT_FILENAME).collect{
       # |line| line.chop!}[2..-1].collect{
      #  |x| x.split(/\s/).map{|s| s.to_i}}    
     # @normal_matrix = Matrix.rows(array)
    #
   
   
   
    def process_line(line)
      #########################################################################
      
      # Find transpose of input hilbert basis
      normal_matrix = line.to_a.transpose
      
      #########################################################################      
      # 1. Use Macaulay2 to find the integer kernel of matrix
      # The integer kernel gives the B matrix for the Gale Diagram
      #########################################################################
      kernel_matrix = KernelMatrix.new(normal_matrix)
      kernel = kernel_matrix.find

      #########################################################################      
      # 2. Use Polymake to find the vertices of P_0
      #########################################################################
      polytope = Polytope.new(kernel_matrix)
      polytope.create

      #########################################################################      
      # 3. For each vertex find its corresponding supporting hyperplanes
      #########################################################################
      supporting_hyperplanes = polytope.find_supporting_hyperplanes

      #########################################################################      
      # 4. Find hilbert basis for each vertex
      #########################################################################
      hyperplane_bases = supporting_hyperplanes.collect{ |plane|
        basis = HilbertBasis.new(nil, plane)
        basis.find_from_hyperplane
        basis.basis
      }

      #########################################################################      
      # 5. Use Macaualy2 to find toric ideal for A
      #########################################################################
      toric = Toric_Ideal_Generator.new(normal_matrix)
      toric_ideal = toric.find

      #########################################################################      
      # 6. Using possible term orders find initial ideals of I_A
      # and find if they are monomial initial ideals
      #########################################################################
      

      
      #########################################################################      
      # 7. Output results
      #########################################################################
      
      # output normal_matrix, term orders and correspoding initial ideal's yes or no

    end

end


# Create and run the application
app = App.new(ARGV, STDIN)
app.run
