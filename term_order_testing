#!/usr/local/bin/ruby -I ./lib/

# == Synopsis 
#   This command computes possible term orders and 
#   the toric ideal of the matrix I
# == Examples
#   This command finds term orders and the toric ideal of I
#     term_order_testing normal_matrix.txt
#
USAGE = <<-EOS
== Usage 
  term_order_testing [options] source_matrix_file

  For help use: term_order_testing -h

== Options
  -h, --help          Displays help message
  -v, --version       Display the version, then exit
  -q, --quiet         Output as little as possible, overrides verbose
  -V, --verbose       Verbose output
  -X, --very-verbose Very verbose output

== Author
  Ashley Shimabuku, Jeff Remer

== Copyright
  Copyright (c) 2011 Ashley Shimabuku, Jeff Remer. Licensed under the MIT License:
  http://www.opensource.org/licenses/mit-license.php
EOS

require 'optparse'
require 'ostruct'
require 'date'
require 'array'
require 'yaml'
require 'kernel_matrix'
require 'polytope'
require 'hilbert_basis'
require 'toric_ideal_generator'
require 'term_order'


class App
  VERSION = '0.0.1'
  
  attr_reader :options

  def initialize(arguments, stdin)
    @arguments = arguments
    @stdin = stdin
    
    Dir.mkdir("output") unless Dir.exists?("output")
    @output_dir = "output/termorder"
    Dir.mkdir(@output_dir) unless Dir.exists?(@output_dir)
    
    # Set defaults
    @options = OpenStruct.new
    @options.verbose = false
    @options.very_verbose = false
    @options.quiet = false
    @options.timeout = 1200
  end

  # Parse options, check arguments, then process the command
  def run
        
    if parsed_options? && arguments_valid? 
      
      puts "Start at #{DateTime.now}\n\n" if @options.verbose
      
      output_options if @options.verbose
            
      process_arguments            
      process_command
      
      puts "\nFinished at #{DateTime.now}" if @options.verbose
      
    else
      output_usage
    end
      
  end
  
  protected
  
    def parsed_options?
      
      # Specify options
      opts = OptionParser.new 
      opts.on('-v', '--version')          { output_version ; exit 0 }
      opts.on('-h', '--help')             { output_help }
      opts.on('-V', '--verbose')          { @options.verbose = true } 
      opts.on('-X', '--very-verbose')     { @options.very_verbose = true }   
      opts.on('-q', '--quiet')            { @options.quiet = true }
            
      opts.parse!(@arguments) rescue return false
      
      process_options
      true      
    end

    # Performs post-parse processing on options
    def process_options
      @options.verbose = false if @options.quiet
      @options.very_verbose = false if @options.quiet
      @options.verbose = true if @options.very_verbose
    end
    
    def output_options
      puts "Options:\n"
      
      @options.marshal_dump.each do |name, val|        
        puts "  #{name} = #{val}"
      end
    end

    # True if required arguments were provided
    def arguments_valid?
      true if @arguments.length == 1 && File.exists?(@arguments.first)
    end
    
    # Setup the arguments
    def process_arguments
      @input_filename = @arguments.first
    end
    
    def output_help
      output_version
      puts USAGE
      exit
    end
    
    def output_usage
      puts USAGE
      exit
    end
    
    def output_version
      puts "#{File.basename(__FILE__)} version #{VERSION}"
    end
    
    
    def process_command
      $VERBOSE=nil
      line_count = `wc -l < #{@input_filename}`.chomp.strip.to_i
      processed_count = 0
      puts "\nProcessing #{@input_filename}: #{line_count} total lines\n\n" if @options.verbose
      IO.foreach(@input_filename){ |line|
#        begin
          process_line(line)
#        rescue
#          log_error(line)
#        end
        processed_count += 1
        percent_done = sprintf "%.2f", (processed_count / line_count.to_f) * 100
        puts "Processed #{processed_count} of #{line_count} (#{line.chomp}) (#{percent_done}%)" if @options.verbose
      }
    end
   
   
    def process_line(line)
      fname = line.gsub("\n",'').split(',').join('_')
      outputfilename = "#{@output_dir}/#{fname}.txt"
      File.open(outputfilename, "w") do |file|
        file.puts "Cone: #{line}"
      end
      #########################################################################
      # 1. For each line of the input numbers define C[a_1,a_2,a_3,a_4] and
      # file find the hilbert basis
      #########################################################################
      hilbert_basis = HilbertBasis.new(line)
      hilbert_basis.find
      
      #########################################################################      
      # 2. Use Macaulay2 to find the integer kernel of matrix
      # The integer kernel gives the B matrix for the Gale Diagram
      #########################################################################
      kernel_matrix = KernelMatrix.new(hilbert_basis)
      kernel = kernel_matrix.find

      #########################################################################      
      # 3. Use Polymake to find the vertices of P_0
      #########################################################################
      polytope = Polytope.new(kernel_matrix)
      polytope.create

      #########################################################################      
      # 4. For each vertex find its corresponding supporting hyperplanes
      #########################################################################
      supporting_hyperplanes = polytope.find_supporting_hyperplanes

      #########################################################################      
      # 5. Find hilbert basis for each vertex
      #########################################################################
      hyperplane_bases = supporting_hyperplanes.collect{ |plane|
        basis = HilbertBasis.new(nil, plane)
        basis.find_from_hyperplane
        basis.basis
      }
      
      #########################################################################      
      # 6. Generate term orders
      
      term_order_batch = TermOrderBatch.new
      
      hyperplane_bases.zip(supporting_hyperplanes).each { |basis, support|
        basis.row_vectors.each{ |row|
          term_order_batch << TermOrder.new(row, support.collect{|r| r.to_a}, kernel_matrix, hilbert_basis)
        }
      }
      
      term_orders = term_order_batch.run.collect{|term_order| term_order.term_order}
      # Generate unit vectors
      term_orders.push(*Matrix.diagonal(*term_orders.first.size.times.collect{|x| -1}).to_a)

      #########################################################################      
      # 7. Using possible term orders generate toric ideal 
      # then find initial ideals of I_A
      # and check if they are monomial
      #########################################################################

      # Timeout method
      begin
        Timeout::timeout(@options.timeout) do |timeout_length|

      # Use 4ti2 to find toric ideal for A
          term_orders.each{|term_order|
            toric = ToricIdealGenerator.new(hilbert_basis, term_order)
            toric_ideal = toric.find

            # seperate into positives and negatives but keep placement
            # (-1,2,3,-4) becomes (0,2,3,0) and (1,0,0,4) store in same row        
            exponent_vectors = toric_ideal.row_vectors.collect{|row|
              positive = row.collect{|el| el > 0 ? el : 0}
              negative = row.collect{|el| el < 0 ? el.abs : 0}
              {:positive => positive, :negative => negative}
            }

            # if dot products are equal then not monomial - save term order with no
            # if dot products are not equal then monomial - save term order with yes
            monomial = true
            exponent_vectors.each{|exp_vector|
              # positive
              dot_positive = Vector.elements(exp_vector[:positive]).inner_product Vector.elements(term_order)
              # negative
              dot_negative = Vector.elements(exp_vector[:negative]).inner_product Vector.elements(term_order)
          
              monomial = false if dot_positive == dot_negative            
            }
        
            # Output
            File.open(outputfilename, "a") do |file|
              file.puts "Term order: [#{term_order.join(', ')}] - monomial: #{monomial}" if @options.verbose
            end
          }
        end
      rescue Timeout::Error
        return
      end
    end

end


# Create and run the application
app = App.new(ARGV, STDIN)
app.run
