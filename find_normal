#!/usr/local/bin/ruby -I ./lib/

# == Synopsis 
#   This command computes normal matrices with no modular triangulation.
#
# == Examples
#   This command computes normal matrices with no modular triangulation.
#     find_normal numbers.txt
#
#   Other examples:
#     find_normal -q numbers.txt
#     find_normal --verbose numbers.txt
USAGE = <<-EOS
== Usage 
  find_normal [options] source_matrix_file

  For help use: find_normal -h

== Options
  -h, --help          Displays help message
  -v, --version       Display the version, then exit
  -q, --quiet         Output as little as possible, overrides verbose
  -V, --verbose       Verbose output
  -X, --very-verbose  Very verbose output
  -S, --S3            Upload results to S3
  -L, --limit LIMIT   Skip if the number of simplices exceeds LIMIT
  -T, --timeout T     Skip if enumerating the vertices exceeds T seconds
  -O, --ouptut DIR    Base output directory

== Author
  Ashley Shimabuku, Jeff Remer

== Copyright
  Copyright (c) 2011 Ashley Shimabuku, Jeff Remer. Licensed under the MIT License:
  http://www.opensource.org/licenses/mit-license.php
EOS

require 'optparse'
require 'ostruct'
require 'date'
require 'array'
require 'yaml'
require 'timeout'

require 'hilbert_basis'
require 'unimodular_simplex_generator'
require 'generic_point'
require 'linear_system'
require 'interior_facet_generator'
require 'vertex_counter'

require 'aws/s3'
include AWS::S3

class App
  VERSION = '0.0.1'
  S3BUCKET = 'normal_matrices'
  TEMP_DIR = 'temp'
  
  attr_reader :options

  def initialize(arguments, stdin)
    @arguments = arguments
    @stdin = stdin

    # Set defaults
    @options = OpenStruct.new
    @options.verbose = false
    @options.very_verbose = false
    @options.quiet = false
    @options.limit = 1000
    @options.timeout = 300
    @options.outputdir = "output"    
    
    Dir.mkdir(TEMP_DIR) unless Dir.exists?(TEMP_DIR) 

  end

  # Parse options, check arguments, then process the command
  def run
        
    if parsed_options? && arguments_valid?     
      @output_dir = generate_output_dir_name
      @error_file = "#{@options.outputdir}/error_#{Time.now.to_i}.log"
      @timeout_file = "#{@options.outputdir}/timeout_#{Time.now.to_i}.log"
      Dir.mkdir(@options.outputdir) unless Dir.exists?(@options.outputdir)
      
      puts "Start at #{DateTime.now}\n\n" if @options.verbose
      
      output_options if @options.verbose
            
      process_arguments            
      process_command
      
      puts "\nFinished at #{DateTime.now}" if @options.verbose
      
    else
      output_usage
    end
      
  end
  
  protected
  
    def parsed_options?
      
      # Specify options
      OptionParser.new do |opts|
        opts.on('-v', '--version')          { output_version ; exit 0 }
        opts.on('-h', '--help')             { output_help }
        opts.on('-V', '--verbose')          { @options.verbose = true } 
        opts.on('-X', '--very-verbose')     { @options.very_verbose = true }   
        opts.on('-q', '--quiet')            { @options.quiet = true }
        opts.on('-S', '--S3')               { @options.s3 = true }
        opts.on('-L', '--limit [LIMIT]')   {|limit|
          @options.limit = limit.to_i
        }
        opts.on('-T', '--timeout [T]') {|timeout|
          @options.timeout = timeout.to_i
        }
        opts.on('-O', '--output [OUTPUT]')   {|output|
          @options.outputdir = output
        }        
      end.parse!(@arguments) rescue return false
      process_options
      true      
    end

    # Performs post-parse processing on options
    def process_options
      @options.verbose = false if @options.quiet
      @options.very_verbose = false if @options.quiet
      @options.verbose = true if @options.very_verbose
    end
    
    def output_options
      puts "Options:\n"
      
      @options.marshal_dump.each do |name, val|        
        puts "  #{name} = #{val}"
      end
    end

    # True if required arguments were provided
    def arguments_valid?
      true if @arguments.length == 1 && File.exists?(@arguments.first)
    end
    
    # Setup the arguments
    def process_arguments
      @input_filename = @arguments.first
    end
    
    def output_help
      output_version
      puts USAGE
      exit
    end
    
    def output_usage
      puts USAGE
      exit
    end
    
    def output_version
      puts "#{File.basename(__FILE__)} version #{VERSION}"
    end
    
    def process_command
      $VERBOSE=nil
      line_count = `wc -l < #{@input_filename}`.chomp.strip.to_i
      processed_count = 0
      puts "\nProcessing #{@input_filename}: #{line_count} total lines\n\n" if @options.verbose
      IO.foreach(@input_filename){ |line|
        begin
          process_line(line)
        rescue => e
          puts "Error: #{e} #{e.backtrace}"
          log_error(line)
        end
        processed_count += 1
        percent_done = sprintf "%.2f", (processed_count / line_count.to_f) * 100
        puts "Processed #{processed_count} of #{line_count} (#{line.chomp}) (#{percent_done}%)" if @options.verbose
      }
    end
    
    def process_line(line)      
      
      #########################################################################
      # 1. For each line of the input numbers define C[a_1,a_2,a_3,a_4] and
      # file find the hilbert basis
      #########################################################################
      hilbert_basis = HilbertBasis.new(line)
      hilbert_basis.find
      puts "Line: #{line}" if @options.verbose
      
      #########################################################################      
      
      #########################################################################
      # 2. Find unimodular simplicies of the cone of the hilbert basis
      #########################################################################
      unimodular_simplex_generator = UnimodularSimplexGenerator.new(hilbert_basis)
      unimodular_simplices = unimodular_simplex_generator.generate
      
      puts "Number of Unimodular Simplices #{unimodular_simplices.to_a.size}" if @options.verbose
      
      # If the number of unimodular simplices is greater than limit save hilbert basis and quit      
      if unimodular_simplices.to_a.size > @options.limit or !defined?(unimodular_simplices)
        log_timeout(line)
        return
      end
          
      #########################################################################      
      
      #########################################################################      
      # 3. Create a generic point that lives inside A
      #########################################################################
      generic_point = GenericPoint.new(hilbert_basis).find

      #########################################################################      

      #########################################################################      
      # 4. Build the first equation for the configuration polytope
      # sum x_i = 1 where x_i is a unimodualr simplex that contain the generic point
      #########################################################################      
      first_equation_coefficients = [1]
      unimodular_simplices.each{|simplex|
        linear_system = LinearSystem.new(simplex, generic_point)
        solution = linear_system.solve
        if solution.to_a.all_positive?
          first_equation_coefficients.push(-1)
        else
          first_equation_coefficients.push(0)
        end        
      }
      
      #########################################################################      

      #########################################################################      
      # 5. Find the interior facets for the cone of the hilbert basis 
      #########################################################################
      interior_facet_generator = InteriorFacetGenerator.new(hilbert_basis)
      interior_facets = interior_facet_generator.generate
      
      #########################################################################      
      # 6. Finds the number of 0/1 verticies
      #########################################################################
      
      # Time out method 
      vertex_count = 1.0/0
      begin
        Timeout::timeout(@options.timeout) do |timeout_length|
          vertex_counter = VertexCounter.new(first_equation_coefficients, interior_facets, hilbert_basis, unimodular_simplices)
          vertex_count = vertex_counter.count.to_i
          puts "Vertex count: #{vertex_count}" if @options.verbose
        end
      rescue Timeout::Error
        log_timeout(line)
        return
      end
      
      #########################################################################      
      # 7. If there are no 0/1 vertices then the hilbert basis has no unimodular triangulations
      #########################################################################
      # Return early if there are any 0/1 vertices or if there was an error
      # Azove2 returns at least 1 vertex
      return if vertex_count > 1 or !defined?(vertex_count)
      
      #########################################################################      
      # 8. Output all results to a file
      #########################################################################
      log_result(hilbert_basis.cone, hilbert_basis)
    end
    
    def generate_output_dir_name
      [@options.outputdir,Time.now.strftime("%Y_%m_%d_%H")].join('/')
    end
    MAX_OUTPUT_FILES_PER_DIR = 100
    
    def dir_is_full?
      (Dir.entries(@output_dir).size - 2) >= MAX_OUTPUT_FILES_PER_DIR
    end
    
    def ensure_dir
      if !defined?(@output_dir)
        @output_dir = generate_output_dir_name
      end
      if(!Dir.exists?(@output_dir)) 
        Dir.mkdir(@output_dir)
        return
      end
      if(dir_is_full?)
        @output_dir = generate_output_dir_name
      end      
    end
    
    def log_error(line)      
      File.open(@error_file, "a"){|file|
        file.puts line.gsub("\n","")
      }
    end
    
    def log_timeout(line)
      File.open(@timeout_file, "a"){|file|
        file.puts line.gsub("\n","")
      }
    end

    def log_result(cone, hilbert_basis)
      ensure_dir
      
      filename = "#{@output_dir}/log_#{cone.join('')}.yml"
      
      File.open(filename, 'w'){ |file|
        file.puts(hilbert_basis.basis.to_yaml)
      }
      
      begin
        log_s3(filename) if @options.s3
      rescue => e
        puts "Error saving #{cone} result to S3 #{e}"
      end
    end
    
    def log_s3(filename)
      Base.establish_connection!(
        :access_key_id     => ENV['AMAZON_ACCESS_KEY_ID'],
        :secret_access_key => ENV['AMAZON_SECRET_ACCESS_KEY']
      )

      S3Object.store(
        filename,
        open(filename),
        S3BUCKET,
        :content_type => 'text/plain'
      )          
    end
      
      
    
end


# Create and run the application
app = App.new(ARGV, STDIN)
app.run
