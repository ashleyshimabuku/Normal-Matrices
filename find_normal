#!/usr/local/bin/ruby -I ./lib/

# == Synopsis 
#   This command computes normal matrices with no modular triangulation.
#
# == Examples
#   This command computes normal matrices with no modular triangulation.
#     find_normal numbers.txt
#
#   Other examples:
#     find_normal -q numbers.txt
#     find_normal --verbose numbers.txt
USAGE = <<-EOS
== Usage 
  find_normal [options] source_matrix_file

  For help use: find_normal -h

== Options
  -h, --help          Displays help message
  -v, --version       Display the version, then exit
  -q, --quiet         Output as little as possible, overrides verbose
  -V, --verbose       Verbose output
  -VV, --very-verbose Very verbose output

== Author
  Ashley Shimabuku, Jeff Remer

== Copyright
  Copyright (c) 2011 Ashley Shimabuku, Jeff Remer. Licensed under the MIT License:
  http://www.opensource.org/licenses/mit-license.php
EOS

require 'optparse'
require 'ostruct'
require 'date'
require 'array'
require 'hilbert_basis'
require 'unimodular_simplex_generator'
require 'generic_point'
require 'linear_system'
require 'interior_facet_generator'
require 'vertex_counter'


class App
  VERSION = '0.0.1'
  
  attr_reader :options

  def initialize(arguments, stdin)
    @arguments = arguments
    @stdin = stdin
    
    # Set defaults
    @options = OpenStruct.new
    @options.verbose = false
    @options.very_verbose = false
    @options.quiet = false
  end

  # Parse options, check arguments, then process the command
  def run
        
    if parsed_options? && arguments_valid? 
      
      puts "Start at #{DateTime.now}\n\n" if @options.verbose
      
      output_options if @options.verbose
            
      process_arguments            
      process_command
      
      puts "\nFinished at #{DateTime.now}" if @options.verbose
      
    else
      output_usage
    end
      
  end
  
  protected
  
    def parsed_options?
      
      # Specify options
      opts = OptionParser.new 
      opts.on('-v', '--version')          { output_version ; exit 0 }
      opts.on('-h', '--help')             { output_help }
      opts.on('-V', '--verbose')          { @options.verbose = true } 
      opts.on('-VV', '--very-verbose')     { @options.very_verbose = true }   
      opts.on('-q', '--quiet')            { @options.quiet = true }
            
      opts.parse!(@arguments) rescue return false
      
      process_options
      true      
    end

    # Performs post-parse processing on options
    def process_options
      @options.verbose = false if @options.quiet
      @options.very_verbose = false if @options.quiet
      @options.verbose = true if @options.very_verbose
    end
    
    def output_options
      puts "Options:\n"
      
      @options.marshal_dump.each do |name, val|        
        puts "  #{name} = #{val}"
      end
    end

    # True if required arguments were provided
    def arguments_valid?
      true if @arguments.length == 1 && File.exists?(@arguments.first)
    end
    
    # Setup the arguments
    def process_arguments
      @input_filename = @arguments.first
    end
    
    def output_help
      output_version
      puts USAGE
      exit
    end
    
    def output_usage
      puts USAGE
      exit
    end
    
    def output_version
      puts "#{File.basename(__FILE__)} version #{VERSION}"
    end
    
    def process_command
      line_count = `wc -l < #{@input_filename}`.chomp.strip.to_i
      processed_count = 0
      puts "\nProcessing #{@input_filename}: #{line_count} total lines\n\n" if @options.verbose
      IO.foreach(@input_filename){ |line|
        process_line(line)
        processed_count += 1
        percent_done = sprintf "%.2f", (processed_count / line_count.to_f) * 100
        puts "Processed #{processed_count} of #{line_count} (#{percent_done}%)" if @options.verbose
      }
    end
    
    def process_line(line)
      #########################################################################
      # 1. For each line of the input numbers file find the hilbert basis
      #########################################################################
      hilbert_basis = HilbertBasis.new(line)
      hilbert_basis.find
      
      puts "Hilbert Basis:" if @options.very_verbose
      puts hilbert_basis.basis.inspect if @options.very_verbose
      #########################################################################      
      
      #########################################################################
      # 2. Find unimodular simplicies
      #########################################################################
      unimodular_simplex_generator = UnimodularSimplexGenerator.new(hilbert_basis)
      unimodular_simplices = unimodular_simplex_generator.generate
      #########################################################################      
      
      #########################################################################      
      # 3. Create a generic point
      #########################################################################
      generic_point = GenericPoint.new(hilbert_basis).find
      puts "Generic Point: #{generic_point}" if @options.very_verbose
      #########################################################################      

      #########################################################################      
      # 4. Solve linear system for each unimodular simplex in order to build an equation
      #########################################################################      
      first_equation_coefficients = [1]
      unimodular_simplices.each{|simplex|
        linear_system = LinearSystem.new(simplex, generic_point)
        solution = linear_system.solve
        if solution.all_positive?
          first_equation_coefficients.push(-1)
        else
          first_equation_coefficients.push(0)
        end        
      }
      
      puts "First Equation Coefficients: #{first_equation_coefficients}" if @options.very_verbose      
      #########################################################################      

      #########################################################################      
      # 5. Find the interior facets of the hilbert basis
      #########################################################################
      interior_facet_generator = InteriorFacetGenerator.new(hilbert_basis)
      interior_facets = interior_facet_generator.generate
      
      #########################################################################      
      # 6. Finds the number of 0/1 verticies
      #########################################################################      
      vertex_counter = VertexCounter.new(first_equation_coefficients, interior_facets, hilbert_basis, unimodular_simplices)
      vertex_count = vertex_counter.count
      puts "Vertex count: #{vertex_count}" if @options.very_verbose

      #########################################################################      
      # 7. If statement
      #########################################################################
      
      
      
      
    end

end

class Matrix
  def all_positive?
    self.each {|v|
      return false if v < 0
    }
    true
  end
end

# Create and run the application
app = App.new(ARGV, STDIN)
app.run
